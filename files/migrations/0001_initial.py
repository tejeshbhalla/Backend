# Generated by Django 3.2.2 on 2023-03-03 08:54

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('content', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='NewUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('name', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_activated', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('two_factor_activated', models.BooleanField(default=False)),
                ('token_value', models.CharField(blank=True, max_length=800, null=True)),
                ('last_access', models.DateTimeField(auto_now_add=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('is_tenant_owner', models.BooleanField(default=False)),
                ('storage_amount_used', models.FloatField(default=0)),
                ('type', models.CharField(choices=[('ADMIN', 'Admin'), ('EMPLOYEE', 'Employee')], default='EMPLOYEE', max_length=50, verbose_name='_Type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Basic_Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=100)),
                ('no_of_users', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(0)])),
                ('max_storage', models.IntegerField(default=5, validators=[django.core.validators.MaxValueValidator(5)])),
                ('max_upload_file_size', models.IntegerField(default=2, validators=[django.core.validators.MaxValueValidator(2)])),
                ('max_recovery_days', models.IntegerField(default=3, validators=[django.core.validators.MaxValueValidator(0)])),
                ('can_link_log', models.BooleanField(default=True)),
                ('can_add_date_to_link', models.BooleanField(default=True)),
                ('can_access_limit', models.BooleanField(default=True)),
                ('can_data_backup', models.BooleanField(default=False)),
                ('can_watermark_pii', models.BooleanField(default=False)),
                ('has_file_versioning', models.BooleanField(default=False)),
                ('has_proctored_link', models.BooleanField(default=False)),
                ('has_email_forwarding', models.BooleanField(default=False)),
                ('has_admin_panel', models.BooleanField(default=False)),
                ('hot_linking_prevention', models.BooleanField(default=True)),
                ('has_groups', models.BooleanField(default=False)),
                ('has_link_password', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Premium_Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('description', models.CharField(max_length=100)),
                ('no_of_users', models.IntegerField(default=10, validators=[django.core.validators.MaxValueValidator(10)])),
                ('max_storage', models.IntegerField(default=1000, validators=[django.core.validators.MaxValueValidator(1000)])),
                ('max_upload_file_size', models.IntegerField(default=100, validators=[django.core.validators.MaxValueValidator(100)])),
                ('max_recovery_days', models.IntegerField(default=7, validators=[django.core.validators.MaxValueValidator(7)])),
                ('can_link_log', models.BooleanField(default=True)),
                ('can_add_date_to_link', models.BooleanField(default=True)),
                ('can_access_limit', models.BooleanField(default=True)),
                ('can_data_backup', models.BooleanField(default=True)),
                ('can_watermark_pii', models.BooleanField(default=True)),
                ('has_file_versioning', models.BooleanField(default=True)),
                ('has_proctored_link', models.BooleanField(default=True)),
                ('has_email_forwarding', models.BooleanField(default=True)),
                ('has_admin_panel', models.BooleanField(default=True)),
                ('hot_linking_prevention', models.BooleanField(default=True)),
                ('has_groups', models.BooleanField(default=True)),
                ('has_link_password', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User_logs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actions', models.JSONField()),
                ('datetime', models.DateTimeField(default=datetime.datetime(2023, 3, 3, 14, 24, 33, 21596))),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_logs', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('subdomain', models.CharField(max_length=100, unique=True)),
                ('plan_type', models.CharField(choices=[('Basic', 'Basic'), ('Premium', 'Premium')], default='Basic', max_length=100)),
                ('on_trial', models.BooleanField(default=False)),
                ('paid_until', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('basic_plan', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenants', to='files.basic_plan')),
                ('premium_plan', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tenants', to='files.premium_plan')),
            ],
        ),
        migrations.CreateModel(
            name='People_Groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('group_hash', models.CharField(max_length=6, unique=True)),
                ('description', models.TextField(max_length=200)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('files', models.ManyToManyField(related_name='group_files', to='content.Files_Model')),
                ('folders', models.ManyToManyField(related_name='group_folders', to='content.Folder')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_groups', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Otp_Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(max_length=6, unique=True)),
                ('time_expired', models.DateTimeField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='otps', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.JSONField()),
                ('read', models.BooleanField(default=False)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(default=None, max_length=100)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_notifications', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Group_Permissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_admin', models.BooleanField(default=False)),
                ('has_read', models.BooleanField(default=True)),
                ('can_add_delete_content', models.BooleanField(default=False)),
                ('can_share_content', models.BooleanField(default=False)),
                ('can_download_content', models.BooleanField(default=False)),
                ('is_proctored', models.BooleanField(default=False)),
                ('is_favourite', models.BooleanField(default=False)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_permissions', to='files.people_groups')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Group_logs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actions', models.JSONField()),
                ('datetime', models.DateTimeField(default=datetime.datetime(2023, 3, 3, 14, 24, 33, 22596))),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_logs', to='files.people_groups')),
            ],
        ),
        migrations.CreateModel(
            name='BlacklistedToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=800, unique=True)),
                ('time_expired', models.DateTimeField()),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='black_listed', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='newuser',
            name='tenant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='members', to='files.tenant'),
        ),
        migrations.AddField(
            model_name='newuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Admin',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('files.newuser',),
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('files.newuser',),
        ),
    ]
